import {
  require_jsx_runtime
} from "./chunk-PCCM77ZV.js";
import {
  require_react_dom
} from "./chunk-WXZZ2GEB.js";
import {
  require_hoist_non_react_statics_cjs
} from "./chunk-X3GLGI4H.js";
import "./chunk-QBGBO5UE.js";
import {
  require_react
} from "./chunk-EOYPEMTV.js";
import {
  __commonJS
} from "./chunk-62VDRKYJ.js";

// node_modules/react-in-viewport/dist/es/lib/constants.js
var require_constants = __commonJS({
  "node_modules/react-in-viewport/dist/es/lib/constants.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.noop = exports.defaultProps = exports.defaultOptions = exports.defaultConfig = void 0;
    var defaultOptions = {};
    exports.defaultOptions = defaultOptions;
    var defaultConfig = {
      disconnectOnLeave: false
    };
    exports.defaultConfig = defaultConfig;
    var noop = () => {
    };
    exports.noop = noop;
    var defaultProps = {
      onEnterViewport: noop,
      onLeaveViewport: noop
    };
    exports.defaultProps = defaultProps;
  }
});

// node_modules/react-in-viewport/dist/es/lib/useInViewport.js
var require_useInViewport = __commonJS({
  "node_modules/react-in-viewport/dist/es/lib/useInViewport.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var _react = require_react();
    var _reactDom = require_react_dom();
    var _constants = require_constants();
    var useInViewport = function useInViewport2(target, options, config, props) {
      if (options === void 0) {
        options = _constants.defaultOptions;
      }
      if (config === void 0) {
        config = _constants.defaultConfig;
      }
      if (props === void 0) {
        props = _constants.defaultProps;
      }
      var {
        onEnterViewport,
        onLeaveViewport
      } = props;
      var [, forceUpdate] = (0, _react.useState)();
      var observer = (0, _react.useRef)();
      var inViewportRef = (0, _react.useRef)(false);
      var intersected = (0, _react.useRef)(false);
      var enterCountRef = (0, _react.useRef)(0);
      var leaveCountRef = (0, _react.useRef)(0);
      function startObserver(_ref) {
        var {
          observerRef
        } = _ref;
        var targetRef = target.current;
        if (targetRef) {
          var node = (0, _reactDom.findDOMNode)(targetRef);
          if (node) {
            observerRef == null ? void 0 : observerRef.observe(node);
          }
        }
      }
      function stopObserver(_ref2) {
        var {
          observerRef
        } = _ref2;
        var targetRef = target.current;
        if (targetRef) {
          var node = (0, _reactDom.findDOMNode)(targetRef);
          if (node) {
            observerRef == null ? void 0 : observerRef.unobserve(node);
          }
        }
        observerRef == null ? void 0 : observerRef.disconnect();
        observer.current = null;
      }
      function handleIntersection(entries) {
        var entry = entries[0] || {};
        var {
          isIntersecting,
          intersectionRatio
        } = entry;
        var isInViewport = typeof isIntersecting !== "undefined" ? isIntersecting : intersectionRatio > 0;
        if (!intersected.current && isInViewport) {
          intersected.current = true;
          onEnterViewport == null ? void 0 : onEnterViewport();
          enterCountRef.current += 1;
          inViewportRef.current = isInViewport;
          forceUpdate(isInViewport);
          return;
        }
        if (intersected.current && !isInViewport) {
          intersected.current = false;
          onLeaveViewport == null ? void 0 : onLeaveViewport();
          if (config.disconnectOnLeave && observer.current) {
            observer.current.disconnect();
          }
          leaveCountRef.current += 1;
          inViewportRef.current = isInViewport;
          forceUpdate(isInViewport);
        }
      }
      function initIntersectionObserver(_ref3) {
        var {
          observerRef
        } = _ref3;
        if (!observerRef) {
          observer.current = new IntersectionObserver(handleIntersection, options);
          return observer.current;
        }
        return observerRef;
      }
      (0, _react.useEffect)(() => {
        var observerRef = observer.current;
        observerRef = initIntersectionObserver({
          observerRef
        });
        startObserver({
          observerRef
        });
        return () => {
          stopObserver({
            observerRef
          });
        };
      }, [target.current, options, config, onEnterViewport, onLeaveViewport]);
      return {
        inViewport: inViewportRef.current,
        enterCount: enterCountRef.current,
        leaveCount: leaveCountRef.current
      };
    };
    var _default = useInViewport;
    exports.default = _default;
  }
});

// node_modules/react-in-viewport/dist/es/lib/handleViewport.js
var require_handleViewport = __commonJS({
  "node_modules/react-in-viewport/dist/es/lib/handleViewport.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = void 0;
    var _react = require_react();
    var _hoistNonReactStatics = _interopRequireDefault(require_hoist_non_react_statics_cjs());
    var _useInViewport = _interopRequireDefault(require_useInViewport());
    var _constants = require_constants();
    var _jsxRuntime = require_jsx_runtime();
    var _excluded = ["onEnterViewport", "onLeaveViewport"];
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var isFunctionalComponent = (Component) => {
      return typeof Component === "function" && !(Component.prototype && Component.prototype.render);
    };
    var isReactComponent = (Component) => {
      return Component.prototype && Component.prototype.isReactComponent;
    };
    function handleViewport(TargetComponent, options, config) {
      if (options === void 0) {
        options = _constants.defaultOptions;
      }
      if (config === void 0) {
        config = _constants.defaultConfig;
      }
      var ForwardedRefComponent = (0, _react.forwardRef)((props, ref) => {
        var refProps = _extends({
          forwardedRef: ref
        }, isReactComponent(TargetComponent) && !isFunctionalComponent(TargetComponent) ? {
          ref
        } : {});
        return (0, _jsxRuntime.jsx)(TargetComponent, _extends({}, props, refProps));
      });
      function InViewport(_ref) {
        var {
          onEnterViewport = _constants.noop,
          onLeaveViewport = _constants.noop
        } = _ref, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
        var node = (0, _react.useRef)();
        var {
          inViewport,
          enterCount,
          leaveCount
        } = (0, _useInViewport.default)(node, options, config, {
          onEnterViewport,
          onLeaveViewport
        });
        var injectedProps = {
          inViewport,
          enterCount,
          leaveCount
        };
        return (0, _jsxRuntime.jsx)(ForwardedRefComponent, _extends({}, restProps, injectedProps, {
          ref: node
        }));
      }
      var name = TargetComponent.displayName || TargetComponent.name || "Component";
      InViewport.displayName = "handleViewport(" + name + ")";
      return (0, _hoistNonReactStatics.default)(InViewport, ForwardedRefComponent);
    }
    var _default = handleViewport;
    exports.default = _default;
  }
});

// node_modules/react-in-viewport/dist/es/index.js
var require_es = __commonJS({
  "node_modules/react-in-viewport/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.useInViewport = exports.handleViewport = exports.default = exports.customProps = void 0;
    var _handleViewport = _interopRequireDefault(require_handleViewport());
    exports.handleViewport = _handleViewport.default;
    var _useInViewport = _interopRequireDefault(require_useInViewport());
    exports.useInViewport = _useInViewport.default;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var customProps = ["inViewport", "enterCount", "leaveCount"];
    exports.customProps = customProps;
    var _default = _handleViewport.default;
    exports.default = _default;
  }
});

// dep:react-in-viewport
var react_in_viewport_default = require_es();
export {
  react_in_viewport_default as default
};
//# sourceMappingURL=react-in-viewport.js.map
